"use strict";var ApplicationConfiguration=function(){var applicationModuleName="fasteach",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("centers"),ApplicationConfiguration.registerModule("cities"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("groups"),ApplicationConfiguration.registerModule("levels"),ApplicationConfiguration.registerModule("professions"),ApplicationConfiguration.registerModule("users"),angular.module("centers").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Centers","centers","dropdown","/centers(/create)?"),Menus.addSubMenuItem("topbar","centers","List Centers","centers"),Menus.addSubMenuItem("topbar","centers","New Center","centers/create")}]),angular.module("centers").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCenters",{url:"/centers",templateUrl:"modules/centers/views/list-centers.client.view.html"}).state("createCenter",{url:"/centers/create",templateUrl:"modules/centers/views/create-center.client.view.html"}).state("viewCenter",{url:"/centers/:centerId",templateUrl:"modules/centers/views/view-center.client.view.html"}).state("editCenter",{url:"/centers/:centerId/edit",templateUrl:"modules/centers/views/edit-center.client.view.html"})}]),angular.module("centers").controller("CentersController",["$scope","$stateParams","$location","Authentication","Centers",function($scope,$stateParams,$location,Authentication,Centers){$scope.authentication=Authentication,$scope.create=function(){var center=new Centers({name:this.name});center.$save(function(response){$location.path("centers/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(center){if(center){center.$remove();for(var i in $scope.centers)$scope.centers[i]===center&&$scope.centers.splice(i,1)}else $scope.center.$remove(function(){$location.path("centers")})},$scope.update=function(){var center=$scope.center;center.$update(function(){$location.path("centers/"+center._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.centers=Centers.query()},$scope.findOne=function(){$scope.center=Centers.get({centerId:$stateParams.centerId})}}]),angular.module("centers").factory("Centers",["$resource",function($resource){return $resource("centers/:centerId",{centerId:"@_id"},{update:{method:"PUT"}})}]),angular.module("cities").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Cities","cities","dropdown","/cities(/create)?"),Menus.addSubMenuItem("topbar","cities","List Cities","cities"),Menus.addSubMenuItem("topbar","cities","New City","cities/create")}]),angular.module("cities").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCities",{url:"/cities",templateUrl:"modules/cities/views/list-cities.client.view.html"}).state("createCity",{url:"/cities/create",templateUrl:"modules/cities/views/create-city.client.view.html"}).state("viewCity",{url:"/cities/:cityId",templateUrl:"modules/cities/views/view-city.client.view.html"}).state("editCity",{url:"/cities/:cityId/edit",templateUrl:"modules/cities/views/edit-city.client.view.html"})}]),angular.module("cities").controller("CitiesController",["$scope","$stateParams","$location","Authentication","Cities","$http",function($scope,$stateParams,$location,Authentication,Cities,$http){$scope.authentication=Authentication,$scope.create=function(){var city=new Cities({name:this.name});city.$save(function(response){$location.path("cities/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(city){if(city){city.$remove();for(var i in $scope.cities)$scope.cities[i]===city&&$scope.cities.splice(i,1)}else $scope.city.$remove(function(){$location.path("cities")})},$scope.update=function(){var city=$scope.city;city.$update(function(){$location.path("cities/"+city._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$http.get("/cities").then(function(res){$scope.cities=res.data,console.log("res: ",res)},function(){})},$scope.findOne=function(){$scope.city=Cities.get({cityId:$stateParams.cityId})}}]),angular.module("cities").factory("Cities",["$resource",function($resource){return $resource("cities/:cityId",{cityId:"@_id"},{update:{method:"PUT"}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("groups").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Groups","groups","dropdown","/groups(/create)?"),Menus.addSubMenuItem("topbar","groups","List Groups","groups"),Menus.addSubMenuItem("topbar","groups","New Group","groups/create")}]),angular.module("groups").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGroups",{url:"/groups",templateUrl:"modules/groups/views/list-groups.client.view.html"}).state("createGroup",{url:"/groups/create",templateUrl:"modules/groups/views/create-group.client.view.html"}).state("viewGroup",{url:"/groups/:groupId",templateUrl:"modules/groups/views/view-group.client.view.html"}).state("editGroup",{url:"/groups/:groupId/edit",templateUrl:"modules/groups/views/edit-group.client.view.html"})}]),angular.module("groups").controller("GroupsController",["$scope","$stateParams","$location","Authentication","Groups",function($scope,$stateParams,$location,Authentication,Groups){$scope.authentication=Authentication,$scope.create=function(){var group=new Groups({name:this.name});group.$save(function(response){$location.path("groups/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(group){if(group){group.$remove();for(var i in $scope.groups)$scope.groups[i]===group&&$scope.groups.splice(i,1)}else $scope.group.$remove(function(){$location.path("groups")})},$scope.update=function(){var group=$scope.group;group.$update(function(){$location.path("groups/"+group._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.groups=Groups.query()},$scope.findOne=function(){$scope.group=Groups.get({groupId:$stateParams.groupId})}}]),angular.module("groups").factory("Groups",["$resource",function($resource){return $resource("groups/:groupId",{groupId:"@_id"},{update:{method:"PUT"}})}]),angular.module("levels").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Levels","levels","dropdown","/levels(/create)?"),Menus.addSubMenuItem("topbar","levels","List Levels","levels"),Menus.addSubMenuItem("topbar","levels","New Level","levels/create")}]),angular.module("levels").config(["$stateProvider",function($stateProvider){$stateProvider.state("listLevels",{url:"/levels",templateUrl:"modules/levels/views/list-levels.client.view.html"}).state("createLevel",{url:"/levels/create",templateUrl:"modules/levels/views/create-level.client.view.html"}).state("viewLevel",{url:"/levels/:levelId",templateUrl:"modules/levels/views/view-level.client.view.html"}).state("editLevel",{url:"/levels/:levelId/edit",templateUrl:"modules/levels/views/edit-level.client.view.html"})}]),angular.module("levels").controller("LevelsController",["$scope","$stateParams","$location","Authentication","Levels",function($scope,$stateParams,$location,Authentication,Levels){$scope.authentication=Authentication,$scope.create=function(){var level=new Levels({name:this.name});level.$save(function(response){$location.path("levels/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(level){if(level){level.$remove();for(var i in $scope.levels)$scope.levels[i]===level&&$scope.levels.splice(i,1)}else $scope.level.$remove(function(){$location.path("levels")})},$scope.update=function(){var level=$scope.level;level.$update(function(){$location.path("levels/"+level._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.levels=Levels.query()},$scope.findOne=function(){$scope.level=Levels.get({levelId:$stateParams.levelId})}}]),angular.module("levels").factory("Levels",["$resource",function($resource){return $resource("levels/:levelId",{levelId:"@_id"},{update:{method:"PUT"}})}]),angular.module("professions").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Professions","professions","dropdown","/professions(/create)?"),Menus.addSubMenuItem("topbar","professions","List Professions","professions"),Menus.addSubMenuItem("topbar","professions","New Profession","professions/create")}]),angular.module("professions").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProfessions",{url:"/professions",templateUrl:"modules/professions/views/list-professions.client.view.html"}).state("createProfession",{url:"/professions/create",templateUrl:"modules/professions/views/create-profession.client.view.html"}).state("viewProfession",{url:"/professions/:professionId",templateUrl:"modules/professions/views/view-profession.client.view.html"}).state("editProfession",{url:"/professions/:professionId/edit",templateUrl:"modules/professions/views/edit-profession.client.view.html"})}]),angular.module("professions").controller("ProfessionsController",["$scope","$stateParams","$location","Authentication","Professions",function($scope,$stateParams,$location,Authentication,Professions){$scope.authentication=Authentication,$scope.create=function(){var profession=new Professions({name:this.name});profession.$save(function(response){$location.path("professions/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(profession){if(profession){profession.$remove();for(var i in $scope.professions)$scope.professions[i]===profession&&$scope.professions.splice(i,1)}else $scope.profession.$remove(function(){$location.path("professions")})},$scope.update=function(){var profession=$scope.profession;profession.$update(function(){$location.path("professions/"+profession._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.professions=Professions.query()},$scope.findOne=function(){$scope.profession=Professions.get({professionId:$stateParams.professionId})}}]),angular.module("professions").factory("Professions",["$resource",function($resource){return $resource("professions/:professionId",{professionId:"@_id"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);